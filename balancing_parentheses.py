"""
Given a string that consists of left and right parantheses, '(' and ')', balance the parentheses by inserting parentheses
as necessary. Determine the minimum number of parenthesis that must be inserted.

Example:
    s='(()))'
    insert 1 left parenthesis at the left end of the string to give '((()))'. The string is balanced after one insertion.

Constraints:
    - 1 <= length of s <= 10^5.

Sample cases:
    STDIN          STDOUT
    -----          ------
    ()))            2

    ()()            0
"""


def getMin(s):
    left = right = 0
    for char in s:
        if char == '(':
            left += 1
        elif char == ')':
            right += 1
        elif char == ' ':
            left += 1
            right += 1

    if left < right:
        return right - left
    else:
        return left - right


if __name__ == '__main__':
    print(getMin('()))'))
    print(getMin('()()'))
    print(getMin(

